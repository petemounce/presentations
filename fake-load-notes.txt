how you capture user traffic

## how you got management buy-in
* dip toes early in the day
* add alerts that are missing around resource metrics
* graduate to later in the day, towards peak time
* schedule it as a recurring, daily job during peak time

## the changes made to facilitate this
## the impact and your learnings

only works with
* good monitoring and alerting - and people reacting
* culture that understands sometimes it's necessary to optimise compared to add features

## how to arrive at the level of load to run?

## how to decide where the mocks should go?
PSP emulator
JCT emulator + JustSaying
-> distributed system must maintain and propagate request context throughout

## what problems did we have?
test data accrues unless you delete it
test data must be sufficiently unique to not be totally unrealistic
how to involve external dependencies in fake load (usually - don't)

should we differentiate real load from fake? -no, other than _maybe_ keeping fake-load-generated data around for as long as real-load-generated-data


## what problems in our platform did we flush out?
unbounded result sets - paging order history for fake load users
resilience & capacity of our monitoring sservices needed enhancement
scaling up for Christmas would have failed - we hit AWS Account limits that we needed to get lifted

screenshots
fake load vs real load, orders, no numbers
one week's worth of load


